/* eslint-disable */
const cacheName = "odoo-sw-cache-v5"; // Increment version on changes
const cachedRequests = [
    "/", // Important: Cache the root URL
    "/offpage",
    "/jasplayg",
    "/shop",
    "/mycss.css",
    "/web/static/src/libs/fontawesome/fonts/fontawesome-webfont.woff2?v=4.7.0",
    "/web/static/lib/odoo_ui_icons/fonts/odoo_ui_icons.woff2",
    "/manifest.json",
    // Add other critical static assets here (CSS, JS, images, etc.)
];

// Import Workbox library
importScripts('https://storage.googleapis.com/workbox-cdn/releases/6.6.0/workbox-sw.js');

self.addEventListener("install", (event) => {
    console.log('[Service Worker] Installing...');
    event.waitUntil(
        caches.open(cacheName)
            .then((cache) => {
                console.log('[Service Worker] Caching app shell and content');
                return cache.addAll(cachedRequests);
            })
            .catch(error => console.error('[Service Worker] Cache addAll failed:', error))
    );
});

const navigateOrDisplayOfflinePage = async (request) => {
    try {
        return await fetch(request);
    } catch (requestError) {
        if (
            request.method === "GET" &&
            ["Failed to fetch", "Load failed"].includes(requestError.message)
        ) {
            const cache = await caches.open(cacheName);
            const cachedResponse = await cache.match(request);
            if (cachedResponse) {
                return cachedResponse;
            }
        }
        throw requestError;
    }
};

self.addEventListener("fetch", (event) => {
    if (
        (event.request.mode === "navigate" && event.request.destination === "document") ||
        event.request.headers.get("accept").includes("text/html")
    ) {
        event.respondWith(
            (async () => {
                try {
                    const response = await navigateOrDisplayOfflinePage(event.request);
                    return response;
                } catch (error) {
                    const offlineResponse = await caches.match("/offpage");
                    if (offlineResponse) {
                        return offlineResponse;
                    }
                    throw error;
                }
            })()
        );
    }
});

// Handle skip waiting for immediate activation
self.addEventListener("message", (event) => {
    if (event.data && event.data.type === "SKIP_WAITING") {
        self.skipWaiting();
    }
});

// Notification and Subscription Handling (Implement your logic here)
self.addEventListener("notificationclick", (event) => {
    event.notification.close();
    console.log('Notification clicked. Implement your logic here.');
    // Example: clients.openWindow('/some-url');
});

self.addEventListener("push", (event) => {
    console.log('[Service Worker] Push Received.');
    if (event.data) {
        const notificationData = event.data.json();
        const title = notificationData.title || 'Notification';
        const options = notificationData.options || {};
        event.waitUntil(self.registration.showNotification(title, options));
    } else {
        console.log('[Service Worker] Push had no data.');
    }
});


self.addEventListener("pushsubscriptionchange", async (event) => {
    console.log('[Service Worker] Subscription changed.');
    try {
        const subscription = await self.registration.pushManager.subscribe(event.oldSubscription.options);
        console.log('[Service Worker] New subscription:', subscription);
        // Send the new subscription to your server
         const response = await fetch("/web/dataset/call_kw/mail.partner.device/register_devices", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                id: 1,
                jsonrpc: "2.0",
                method: "call",
                params: {
                    model: "mail.partner.device",
                    method: "register_devices",
                    args: [],
                    kwargs: {
                        ...subscription.toJSON(),
                        previousEndpoint: event.oldSubscription.endpoint,
                    },
                    context: {},
                },
            }),
            mode: "cors",
            credentials: "include",
        });
        if (!response.ok) {
            console.error('Failed to send subscription to server:', response.status, response.statusText);
        } else {
            console.log('Subscription sent to server successfully.');
        }

    } catch (error) {
        console.error('Error resubscribing:', error);
    }
});
